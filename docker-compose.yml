services:
  # ---------------------------
  # Redis 服务（缓存）
  # ---------------------------
  redis:
    image: "redis:8.0"
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network
    environment:
      - TZ=Asia/Shanghai  # 设置时区
  # ---------------------------
  # MySQL 服务（数据库）
  # ---------------------------
  mysql:
    image: "mysql:8.0"
    ports:
      - "3306:3306"
    command: [ "mysqld", "--default-authentication-plugin=mysql_native_password", "--bind-address=0.0.0.0", "--init-file=/docker-entrypoint-initdb.d/init.sql" ]
    environment:
      MYSQL_ROOT_PASSWORD: "325523"
      MYSQL_DATABASE: "agricultural_vision"
      MYSQL_ROOT_HOST: "%"  # 允许root从任何主机连接
      TZ: Asia/Shanghai                        # 设置时区
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p325523" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - app-network

  # Nginx 负载均衡器
#  nginx:
#    image: nginx:alpine
#    ports:
#      - "80:80"
#      - "443:443"  # 如果需要 HTTPS
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#      - ./nginx/conf.d:/etc/nginx/conf.d:ro
#    depends_on:
#      - agricultural_vision_1
#      - agricultural_vision_2
#      - agricultural_vision_3
#    networks:
#      - app-network

  # ---------------------------
  # Envoy 代理（API 网关）
  # ---------------------------
  envoy:
    image: envoyproxy/envoy:v1.33-latest
    ports:
      - "80:10000"     # HTTP 端口
      - "9901:9901"    # Envoy 管理界面
    volumes:
      - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml:ro
    command: /usr/local/bin/envoy -c /etc/envoy/envoy.yaml
    depends_on:
      - agricultural_vision_1
      - agricultural_vision_2
      - agricultural_vision_3
    restart: unless-stopped
    networks:
      - app-network
    environment:
      - TZ=Asia/Shanghai  # 设置时区

  # ---------------------------
  # etcd 服务（用于服务发现/配置中心）
  # ---------------------------
  etcd:
    image: bitnami/etcd:3.6
    container_name: etcd
    ports:
      - "2379:2379"
    environment:
      - ETCD_NAME=etcd-node1          # 节点名称（唯一标识）
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_INITIAL_CLUSTER=etcd-node1=http://etcd:2380  # 与 ETCD_NAME 一致
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd:2380
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ALLOW_NONE_AUTHENTICATION=yes  # 开发环境允许无认证
      - TZ=Asia/Shanghai  # 设置时区
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "etcdctl --endpoints=http://localhost:2379 endpoint health"]
      interval: 5s
      timeout: 5s
      retries: 5

  # ---------------------------
  # Kafka 4.0 服务（无 ZooKeeper）
  # ---------------------------
  kafka:
    image: bitnami/kafka:4.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=controller,broker  # 控制器和 broker 角色
      - KAFKA_CFG_NODE_ID=1                        # 节点 ID
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093  # 控制器通信地址
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9093,PLAINTEXT://:9092  # 新增控制器监听协议
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT  # 协议映射
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER  # 明确控制器监听名称
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - TZ=Asia/Shanghai  # 设置时区
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kafka-data:/bitnami/kafka

  # 应用实例1
  agricultural_vision_1:
    build: .
    command: sh -c "/app/wait-for.sh redis:6379 mysql:3306 -- /app/agricultural_vision /app/conf/config.yaml"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "8080"  # 只在内部网络暴露端口
    networks:
      - app-network
    environment:
      - GIN_MODE=release
      - INSTANCE_NAME=vision-instance-1  # 设置实例名称
      - TZ=Asia/Shanghai  # 设置时区

  # 应用实例2
  agricultural_vision_2:
    build: .
    command: sh -c "/app/wait-for.sh redis:6379 mysql:3306 -- /app/agricultural_vision /app/conf/config.yaml"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "8080"
    networks:
      - app-network
    environment:
      - GIN_MODE=release
      - INSTANCE_NAME=vision-instance-2  # 设置实例名称
      - TZ=Asia/Shanghai  # 设置时区

  # 应用实例3
  agricultural_vision_3:
    build: .
    command: sh -c "/app/wait-for.sh redis:6379 mysql:3306 -- /app/agricultural_vision /app/conf/config.yaml"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "8080"
    networks:
      - app-network
    environment:
      - GIN_MODE=release
      - INSTANCE_NAME=vision-instance-3  # 设置实例名称
      - TZ=Asia/Shanghai  # 设置时区

volumes:
  kafka-data:
# ---------------------------
# 网络配置
# ---------------------------
networks:
  app-network:
    driver: bridge