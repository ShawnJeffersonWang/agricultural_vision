services:
  redis:
    image: "redis:8.0"
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  mysql:
    image: "mysql:8.0"
    ports:
      - "3306:3306"
    command: [ "mysqld", "--default-authentication-plugin=mysql_native_password", "--bind-address=0.0.0.0", "--init-file=/docker-entrypoint-initdb.d/init.sql" ]
    environment:
      MYSQL_ROOT_PASSWORD: "325523"
      MYSQL_DATABASE: "agricultural_vision"
      MYSQL_ROOT_HOST: "%"  # 允许root从任何主机连接
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p325523" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - app-network

  # Nginx 负载均衡器
#  nginx:
#    image: nginx:alpine
#    ports:
#      - "80:80"
#      - "443:443"  # 如果需要 HTTPS
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#      - ./nginx/conf.d:/etc/nginx/conf.d:ro
#    depends_on:
#      - agricultural_vision_1
#      - agricultural_vision_2
#      - agricultural_vision_3
#    networks:
#      - app-network

  # Envoy 代理
  envoy:
    image: envoyproxy/envoy:v1.33-latest
    ports:
      - "80:10000"     # HTTP 端口
      - "9901:9901"    # Envoy 管理界面
    volumes:
      - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml:ro
    command: /usr/local/bin/envoy -c /etc/envoy/envoy.yaml
    depends_on:
      - agricultural_vision_1
      - agricultural_vision_2
      - agricultural_vision_3
    restart: unless-stopped
    networks:
      - app-network

  # 应用实例1
  agricultural_vision_1:
    build: .
    command: sh -c "/app/wait-for.sh redis:6379 mysql:3306 -- /app/agricultural_vision /app/conf/config.yaml"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "8080"  # 只在内部网络暴露端口
    networks:
      - app-network
    environment:
      - GIN_MODE=release
      - INSTANCE_NAME=vision-instance-1  # 设置实例名称

  # 应用实例2
  agricultural_vision_2:
    build: .
    command: sh -c "/app/wait-for.sh redis:6379 mysql:3306 -- /app/agricultural_vision /app/conf/config.yaml"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "8080"
    networks:
      - app-network
    environment:
      - GIN_MODE=release
      - INSTANCE_NAME=vision-instance-2  # 设置实例名称

  # 应用实例3
  agricultural_vision_3:
    build: .
    command: sh -c "/app/wait-for.sh redis:6379 mysql:3306 -- /app/agricultural_vision /app/conf/config.yaml"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "8080"
    networks:
      - app-network
    environment:
      - GIN_MODE=release
      - INSTANCE_NAME=vision-instance-3  # 设置实例名称

networks:
  app-network:
    driver: bridge